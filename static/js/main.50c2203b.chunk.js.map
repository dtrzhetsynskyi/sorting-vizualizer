{"version":3,"sources":["settings/settings.js","functions/generateNumbersArray.js","functions/getRandomNumFromInterval.js","state/numbersSlice.js","state/statisticsSlice.js","state/rootReducer.js","state/store.js","functions/swap.js","functions/sleep.js","state/animationSlice.js","algorithms/InsertionSort.js","algorithms/SelectionSort.js","algorithms/ShellSort.js","algorithms/MergeSort.js","functions/shuffle.js","algorithms/quickSort.js","Bar.js","App.js","index.js"],"names":["SETTINGS","generateNumbersArray","from","to","newArray","i","push","Math","floor","random","numbers","createSlice","name","initialState","reducers","setNumbersArray","state","action","payload","generateRandomNumbersArray","actions","statistics","comparisons","acesses","updateStatistics","combineReducers","numbersReducer","statisticsReducer","store","createStore","rootReducer","applyMiddleware","thunk","swap","arr","j","copy","sleep","ms","Promise","resolve","setTimeout","addAnimation","createAsyncThunk","a","type","data","document","querySelector","style","backgroundColor","dispatch","getInsertionSortAnimations","arrCopy","getState","arrLength","length","getSelectionSortAnimations","min","num","getShellSortAnimations","h","merge","aux","lo","mid","hi","k","sort","getMergeSortAnimations","Array","shuffle","shuffledArr","x","partition","getQuickSortAnimations","Bar","height","id","className","mapDispatch","connect","animation","resetBarsColor","color","setButtonsState","controlls","querySelectorAll","map","item","disabled","alg","src","alt","onClick","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.50c2203b.chunk.js","sourcesContent":["export const SETTINGS = {\n  barsAmount: 100,\n  delayMs: 20,\n  minBarValue: 5,\n  maxBarValue: 600,\n  swapColor: '#ff0000',\n  selectColor: '#0027ff',\n  defaultColor: '#868585'\n}","import { SETTINGS } from '../settings/settings';\nimport {getRandomNumFromInterval} from './getRandomNumFromInterval';\nexport function generateNumbersArray() {\n  const newArray = [];\n  for (let i = 0; i < SETTINGS.barsAmount; i++) {\n    newArray.push(\n      getRandomNumFromInterval(SETTINGS.minBarValue, SETTINGS.maxBarValue)\n    );\n  }\n  return newArray;\n}","export function getRandomNumFromInterval(from, to) {\n  return Math.floor(Math.random() * (to - from + 1) + from);\n}","import { createSlice } from \"@reduxjs/toolkit\";\nimport {generateNumbersArray} from '../functions/generateNumbersArray';\nconst numbers = createSlice({\n  name: 'numbers',\n  initialState: generateNumbersArray(),\n  reducers: {\n    setNumbersArray(state, action) {\n      return [...action.payload];\n    },\n    generateRandomNumbersArray(state, action) {\n      return generateNumbersArray();\n    }\n  }\n});\nexport const {setNumbersArray, generateRandomNumbersArray} = numbers.actions;\nexport default numbers.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\nconst statistics = createSlice({\n  name: 'statistics',\n  initialState: { comparisons: 0, acesses: 0 },\n  reducers: {\n    updateStatistics(state, action) {\n      return action.payload;\n    }\n  }\n});\nexport const { updateStatistics } = statistics.actions;\nexport default statistics.reducer;","import { combineReducers } from '@reduxjs/toolkit';\nimport numbersReducer from './numbersSlice';\nimport statisticsReducer from './statisticsSlice';\nexport default combineReducers({\n  numbers: numbersReducer,\n  statistics: statisticsReducer\n});","import { applyMiddleware, createStore } from \"@reduxjs/toolkit\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./rootReducer\";\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nexport default store;","export function swap(arr, i, j) {\n  const copy = arr[i];\n  arr[i] = arr[j];\n  arr[j] = copy;\n};","export function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms));\n};","import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { sleep } from '../functions/sleep';\nimport { setNumbersArray } from \"./numbersSlice\";\nimport store from \"./store\";\n\nexport const addAnimation = createAsyncThunk(\n  'animation', \n  async (payload) => {\n    const { type, data, arr } = payload;\n    let i, j;\n    if(data) {\n      [i, j] = data;\n    }\n    if(type === 'swap') {\n      document.querySelector(`#bar-${i}`).style.backgroundColor = '#ff0000';\n      document.querySelector(`#bar-${j}`).style.backgroundColor = '#ff0000';\n    } else if(type === 'select') {\n      document.querySelector(`#bar-${i}`).style.backgroundColor = '#0027ff';\n      if(j) {\n        document.querySelector(`#bar-${j}`).style.backgroundColor = '#0027ff';\n      }\n    }\n\n    await sleep(10);\n    if((type === 'swap' || type === 'update') && arr) {\n      store.dispatch(setNumbersArray(arr));\n    }\n    if(data) {\n      document.querySelector(`#bar-${i}`).style.backgroundColor = '#868585';\n      if(j) {\n        document.querySelector(`#bar-${j}`).style.backgroundColor = '#868585';\n      }\n    }\n  }\n);","import {swap} from '../functions/swap';\nimport { addAnimation } from '../state/animationSlice';\nimport store from '../state/store';\nimport {updateStatistics} from '../state/statisticsSlice';\n\nexport async function getInsertionSortAnimations() {\n  const arrCopy = [...store.getState().numbers];\n  let arrLength = arrCopy.length;\n\t\n\tfor(let i = 0; i < arrLength; i++) {\n    for(let j = i; j > 0; j--) {\n      await store.dispatch(addAnimation({ type: 'select', data: [j, j-1] }));\n      if(arrCopy[j] < arrCopy[j-1]) {\n        swap(arrCopy, j, j-1);\n        await store.dispatch(addAnimation({ type: 'swap', data: [j, j-1], arr: [...arrCopy] }));\n\n        const statistics = store.getState().statistics;\n        await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 5 }));\n      } else {\n        const statistics = store.getState().statistics;\n        await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 2 }));\n        break;\n      }\n    }\n  }\n};","import { swap } from '../functions/swap';\nimport store from '../state/store';\nimport { addAnimation } from '../state/animationSlice';\nimport {updateStatistics} from '../state/statisticsSlice';\n\nexport async function getSelectionSortAnimations() {\n\tconst arrCopy = [...store.getState().numbers];\n\tconst arrLength = arrCopy.length;\n\t\n\tfor(let i = 0; i < arrLength; i++) {\n\t\tlet min = i;\n\t\tfor(let j = i + 1; j < arrLength; j++) {\n\t\t\tif(arrCopy[j] < arrCopy[min]) {\n\t\t\t\tmin = j;\n\t\t\t}\n\t\t};\n\t\t\n\t\tawait store.dispatch(addAnimation({ type: 'select', data: [i, min] }));\n\t\tif(min !== i) {\n\t\t\tswap(arrCopy, i, min);\n\t\t\tawait store.dispatch(addAnimation({ type: 'swap', data: [i, min], arr: [...arrCopy] }));\n\n\t\t\tconst num = store.getState().statistics.comparisons + arrLength-i+1;\n\t\t\tawait store.dispatch(updateStatistics({ comparisons: num, acesses: 2*num+3 }));\n\t\t} else {\n\t\t\tconst num = store.getState().statistics.comparisons + arrLength-i+1;\n\t\t\tawait store.dispatch(updateStatistics({ comparisons: num, acesses: 2*num }));\n\t\t}\n\t}\n}\n","import { swap } from '../functions/swap';\nimport store from '../state/store';\nimport { addAnimation } from '../state/animationSlice';\nimport {updateStatistics} from '../state/statisticsSlice';\n\nexport async function getShellSortAnimations(arr = []) {\n  const arrCopy = [...store.getState().numbers];\n  const arrLength = arrCopy.length;\n\n  let h = 1;\n  while (h < arrLength / 3) {\n    h = 3 * h + 1; // shell's sequence\n  }\n\n  while (h >= 1) {\n    for (let i = h; i < arrLength; i++) {\n      for (let j = i; j >= h; j -= h) {\n        await store.dispatch(addAnimation({ type: 'select', data: [j, j - h] }));\n        if (arrCopy[j] < arrCopy[j - h]) {\n          swap(arrCopy, j, j - h);\n          await store.dispatch(addAnimation({\n            type: 'swap',\n            data: [j, j - h],\n            arr: [...arrCopy],\n          }));\n          const statistics = store.getState().statistics;\n          await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 5 }));\n        } else {\n          const statistics = store.getState().statistics;\n          await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 2 }));\n          break; // !!!!\n        }\n      }\n    }\n    h = Math.floor(h / 3);\n  }\n}\n","import store from '../state/store';\nimport { addAnimation } from '../state/animationSlice';\nimport {updateStatistics} from '../state/statisticsSlice';\n\nasync function merge(arr, aux, lo, mid, hi) {\n  for(let k = lo; k <= hi; k++) {\n    aux[k] = arr[k];\n  }\n  const statistics = store.getState().statistics;\n  await store.dispatch(updateStatistics({ comparisons: statistics.comparisons, acesses: statistics.acesses + hi-lo }));\n\n  let i = lo;\n  let j = mid + 1;\n  for(let k = lo; k <= hi; k++) {\n    if(i > mid) {\n      arr[k] = aux[j++];\n      if(j <= hi) {\n        await store.dispatch(addAnimation({ type: 'select', data: [j] }));\n        const statistics = store.getState().statistics;\n        await store.dispatch(updateStatistics({ comparisons: statistics.comparisons, acesses: statistics.acesses + 1 }));\n      }\n    } else if(j > hi) {\n      arr[k] = aux[i++];\n      await store.dispatch(addAnimation({ type: 'select', data: [i] }));\n      const statistics = store.getState().statistics;\n      await store.dispatch(updateStatistics({ comparisons: statistics.comparisons, acesses: statistics.acesses + 1 }));\n    } else if(aux[j] < aux[i]) {\n      arr[k] = aux[j++];\n      if(j <= hi) {\n        await store.dispatch(addAnimation({ type: 'select', data: [i, j] }));\n      }\n      const statistics = store.getState().statistics;\n      await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 1 }));\n    } else {\n      arr[k] = aux[i++];\n      await store.dispatch(addAnimation({ type: 'select', data: [i, j] }));\n      const statistics = store.getState().statistics;\n      await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 1 }));\n    }\n  }\n  await store.dispatch(addAnimation({ type: 'update', arr: [...arr] }));\n}\n\nasync function sort(arr, aux, lo, hi) {\n  if(hi <= lo) {\n    return;\n  }\n  let mid = Math.floor(lo + (hi - lo) / 2);\n  await sort(arr, aux, lo, mid);\n  await sort(arr, aux, mid+1, hi);\n  if(arr[mid+1] > arr[mid]) {\n    return;\n  }\n  await merge(arr, aux, lo, mid, hi);\n};\n\nexport async function getMergeSortAnimations() {\n  const arrCopy = [...store.getState().numbers];\n\tconst arrLength = arrCopy.length;\n\n  const aux = new Array(arrLength);\n  await sort(arrCopy, aux, 0, arrLength - 1);\n}","export function shuffle(arr) {\n  const shuffledArr = [...arr];\n  for(let i = arr.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i+1));\n    let x = shuffledArr[i];\n    shuffledArr[i] = shuffledArr[j];\n    shuffledArr[j] = x;\n  }\n  return shuffledArr;\n};","import { shuffle } from \"../functions/shuffle\";\nimport { swap } from \"../functions/swap\";\n\nimport store from '../state/store';\nimport { addAnimation } from '../state/animationSlice';\nimport {updateStatistics} from '../state/statisticsSlice';\n\nasync function partition(arr, lo, hi) {\n  let i = lo;\n  let j = hi+1;\n  while(true) {\n    while(arr[++i] < arr[lo]) {\n      await store.dispatch(addAnimation({ type: 'select', data: [lo, i] }));\n      const statistics = store.getState().statistics;\n      await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 2 }));\n      if(i === hi) {\n        break;\n      }\n    }\n    while(arr[lo] < arr[--j]) {\n      await store.dispatch(addAnimation({ type: 'select', data: [lo, j] }));\n      const statistics = store.getState().statistics;\n      await store.dispatch(updateStatistics({ comparisons: statistics.comparisons+1, acesses: statistics.acesses + 2 }));\n      if(j === lo) {\n        break;\n      }\n    }\n    \n    if(i >= j) {\n      break;\n    }\n    swap(arr, i, j);\n    await store.dispatch(addAnimation({ type: 'swap', data: [i, j], arr: [...arr] }));\n    const statistics = store.getState().statistics;\n    await store.dispatch(updateStatistics({ comparisons: statistics.comparisons, acesses: statistics.acesses + 3 }));\n  }\n  swap(arr, lo, j);\n  await store.dispatch(addAnimation({ type: 'swap', data: [lo, j], arr: [...arr] }));\n  const statistics = store.getState().statistics;\n  await store.dispatch(updateStatistics({ comparisons: statistics.comparisons, acesses: statistics.acesses + 3 }));\n  return j;\n}\n\nasync function sort(arr, lo, hi) {\n  if(hi <= lo) {\n    return;\n  }\n  let j = await partition(arr, lo, hi);\n  await sort(arr, lo, j-1);\n  await sort(arr, j+1, hi);\n};\n\nexport async function getQuickSortAnimations() {\n  const arrCopy = shuffle([...store.getState().numbers]);\n  await sort(arrCopy, 0, arrCopy.length - 1);\n}","import { SETTINGS } from \"./settings/settings\";\n\nexport function Bar({ height, id }) {\n  return (\n    <div className=\"bar\" style={{height: `${height}px`, backgroundColor: `${SETTINGS.defaultColor}`}} id={`bar-${id}`}></div>\n  )\n};","import { connect } from 'react-redux';\nimport {setNumbersArray, generateRandomNumbersArray} from './state/numbersSlice';\nimport {updateStatistics} from './state/statisticsSlice';\n\nimport { getInsertionSortAnimations } from './algorithms/InsertionSort';\nimport {getSelectionSortAnimations} from './algorithms/SelectionSort';\nimport { getShellSortAnimations } from './algorithms/ShellSort';\nimport { getMergeSortAnimations } from './algorithms/MergeSort';\nimport { getQuickSortAnimations } from './algorithms/quickSort';\n\nimport { Bar } from './Bar';\nimport { shuffle } from './functions/shuffle';\nimport { SETTINGS } from './settings/settings';\n\nfunction App({ updateStatistics, setNumbersArray, generateRandomNumbersArray, numbers, statistics }) {\n  function resetBarsColor() {\n    for (let i = 0; i < numbers.length; i++) {\n      document.querySelector(`#bar-${i}`).style.color = SETTINGS.defaultColor;\n    }\n  }\n\n  function setButtonsState(state) {\n    const controlls = document.querySelectorAll('.controll');\n    [...controlls].map((item) => (item.disabled = state));\n  }\n\n  async function sort(alg) {\n    updateStatistics({ comparisons: 0, acesses: 0 });\n    setButtonsState(true);\n    if (alg === 'selection') {\n      await getSelectionSortAnimations();\n    } else if (alg === 'insertion') {\n      await getInsertionSortAnimations();\n    } else if (alg === 'shell') {\n      await getShellSortAnimations();\n    } else if (alg === 'merge') {\n      await getMergeSortAnimations();\n    } else if (alg === 'quick') {\n      await getQuickSortAnimations();\n    }\n    setButtonsState(false);\n    resetBarsColor();\n  }\n\n  function shuffleNumbers() {\n    setNumbersArray(shuffle(numbers));\n  }\n\n  return (\n    <>\n      <div className=\"bars\">\n        {numbers.map((item, id) => {\n          return <Bar height={item} key={id} id={id}></Bar>;\n        })}\n      </div>\n\n      <div className=\"controlls-wrapper\">\n        <div className=\"controlls\">\n          <div className=\"logo\">\n            <img src=\"./img/logo.svg\" alt=\"Sorting visualizer\"/>\n          </div>\n          <div className=\"statistics\">\n            <p className=\"statistics-comparisons\">{statistics.comparisons} comparisons</p>\n            <p className=\"statistics-acesses\">{statistics.acesses} array acesses</p>\n          </div>\n          <button\n            className=\"controll\"\n            onClick={() => {\n              generateRandomNumbersArray();\n              updateStatistics({ comparisons: 0, acesses: 0 });\n            }}\n          >\n            Generate new array\n          </button>\n          <button className=\"controll\" onClick={() => {\n            shuffleNumbers();\n            updateStatistics({ comparisons: 0, acesses: 0 });\n          }}>\n            Shuffle\n          </button>\n          <button className=\"controll\" onClick={() => sort('selection')}>\n            Selection sort\n          </button>\n          <button className=\"controll\" onClick={() => sort('insertion')}>\n            Insertion sort\n          </button>\n          <button className=\"controll\" onClick={() => sort('shell')}>\n            Shell sort\n          </button>\n          <button className=\"controll\" onClick={() => sort('merge')}>\n            Merge sort\n          </button>\n          <button className=\"controll\" onClick={() => sort('quick')}>\n            Quick sort\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst mapDispatch = { updateStatistics, setNumbersArray, generateRandomNumbersArray };\nconst mapStateToProps = ({ statistics, numbers, animation }) => ({statistics, numbers, animation}); \nexport default connect(mapStateToProps, mapDispatch)(App);\n","import React from 'react';\nimport { Provider } from 'react-redux'\nimport ReactDOM from 'react-dom';\nimport store from './state/store';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}